// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// nse_cpp
SEXP nse_cpp(NumericVector truth, NumericVector estimate, bool performance, bool na_rm);
RcppExport SEXP _tidyhydro_nse_cpp(SEXP truthSEXP, SEXP estimateSEXP, SEXP performanceSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type truth(truthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type estimate(estimateSEXP);
    Rcpp::traits::input_parameter< bool >::type performance(performanceSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(nse_cpp(truth, estimate, performance, na_rm));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tidyhydro_nse_cpp", (DL_FUNC) &_tidyhydro_nse_cpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_tidyhydro(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
